Instructions on how to use ThrottleBot:

1. To run Throttlebot, please create a configuration file. test_config.cfg serves as an example of how such a file would look. All parameters specified are mandatory and parameters that require multiple values should be comma-separated,without spaces

The "Basic" Section describes general Throttlebot parameters.

baseline_trials: The number of experiment trials to run for the baseline experiment
trials: The number of trials to run each of the stressed experiments (you might feel inclined to choose fewer trials than experiment_trials for faster experimenting
increments: Describes how many levels of stressing. An increment of 20 suggests you would stress up to 20% of the resource's maximum capacity.
stress_these_resources: The resources that are good to consider. Current options so far are only DISK, NET, CPU-CORE, and CPU-QUOTA. 
stress_these_services: The names of the services you would want Throttlebot to stress. To stress all services,simply indicate *. Throttlebot will blacklist any non-application related services by default
redis_host: The host where the Redis is located (Throttlebot uses Redis as it's data store)
stress_policy: The policy that is being used by Throttlebot to decide which containers to consider on each iteration.
gradient_mode: This decides the gradient mode that is being used by Throttlebot. The two options are 'single and 'inverted'. 

The "Workload" section describes several Workload specific parameters. Throttlebot will run the experiment in this manner on each iteration.

type: Each implemented workload will have a type. Set the experiment name here. This might be deprecated later.
request_generator: An instance that generates requests to the application under test. There might be multiple of these instances. 
frontend: The host name (or IP address) where the application frontend is
additional_args: The names of any additional arguments that would be used by this workload
additional_arg_values: The values of the additional arguments (see additional_args above), listed in the same order as the argument names in additional_args
tbot_metric: The experiment could return several metrics, but this tells Throttlebot which metric to prioritize MIMRs by. There can only be a single metric here. Ensure that the metric is spelled identically as in your workload.py
performance_target: A termination point for Throttlebot. This is for Throttlebot to know when to stop running the experiments. This is not yet implemented.

The "Filter" section describes Filter specific parameters that Throttlebot will use to prune the search space. There is currently only a single filter_policy.
filter_policy: the type of filtering policy that you want. If there is no entry for the filter policy, then no filtering will be used.
stress_amount: how much the resources that are being jointly stressed (i.e., the pipelines) are stressed.
filter_exp_trials: the number of trials you want to do for the filter policy
pipeline_services: the services that should be stressed together. Separate the pipelines by commas, and the individual services within a pipeline by dashes. For example: "Sparkstreaming-haproxy-mongo,nginx-redis". If you're too lazy to specify particular services to be in a pipeline, there are defaults. The default options are as follows. 1.) BY_SERVICE will simply treat each service as a pipeline (i.e., stress all MRs that are part of each service). 2) RANDOM: This will create n groups of random partitions of MRs and stress those as MRs. n is set by pipeline_partitions
pipeline_partitions: see the pipeline_services option

Once the configuration is set, ensure Redis is up and running, and then start Throttlebot with the following command.

$ python run_throttlebot.py <config_file_name>

2. If necessary, set the "password" variables for your SSH keys. Without this, Throttlebot cannot execute commands on the virtual machines. They are located within remote_execution.py and measure_performance_MEAN_py3.py.